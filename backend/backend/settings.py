"""
Django settings for backend project.
Generated by 'django-admin startproject' using Django 5.2.3.
For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
# --- Importaciones y Configuración Inicial ---
from dotenv import load_dotenv
import os
import dj_database_url
from django.core.exceptions import ImproperlyConfigured
from pathlib import Path

# Define el directorio base del proyecto para construir rutas de forma segura.
BASE_DIR = Path(__file__).resolve().parent.parent

# Carga las variables de entorno desde el archivo .env
# Esto permite mantener las configuraciones sensibles (como contraseñas) fuera del código.
load_dotenv(BASE_DIR / '.env', encoding='utf-8')


# --- Configuraciones de Seguridad ---
# Clave secreta para la seguridad criptográfica de Django. Se carga desde el entorno.
SECRET_KEY = os.environ.get('SECRET_KEY')

# El modo DEBUG. Debería ser 'False' en producción para no exponer información sensible.
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

# Se obtienen los hosts permitidos de las variables de entorno y se limpian
# para evitar entradas vacías o con espacios extra.
# Define qué dominios pueden servir esta aplicación Django.
ALLOWED_HOSTS = [host.strip() for host in os.environ.get(
    'ALLOWED_HOSTS', '').split(',') if host.strip()]


# --- Definición de Aplicaciones ---
# Aquí se registran todas las aplicaciones que componen el proyecto.
INSTALLED_APPS = [
    # Aplicaciones por defecto de Django
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Aplicaciones de terceros
    # 'corsheaders' maneja los permisos para que el frontend pueda comunicarse con el backend.
    'corsheaders',
    # 'rest_framework' es la librería para construir APIs.
    'rest_framework',
    # 'rest_framework.authtoken' proporciona el sistema de autenticación por token.
    'rest_framework.authtoken',

    # Mis aplicaciones
    # Cada aplicación del proyecto debe registrarse aquí.
    'blog.apps.BlogConfig',
    'accounts.apps.AccountsConfig',
]
# --- Middleware ---
# El middleware procesa las peticiones y respuestas globalmente.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # 'CorsMiddleware' debe ir antes de otros middlewares que generen respuestas.
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Direcciones permitidas para CORS, cargadas desde variables de entorno
# Define qué orígenes (frontend) tienen permiso para hacer peticiones a esta API.
CORS_ALLOWED_ORIGINS = [
    origin.strip() for origin in os.environ.get('CORS_ALLOWED_ORIGINS', '').split(',') if origin.strip()
]

# --- Configuración de URLs y Plantillas ---
# Apunta al archivo de configuración de URLs principal del proyecto.
ROOT_URLCONF = 'backend.urls'

# Configuración para el sistema de plantillas de Django (aunque no lo usamos mucho en una API).
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# --- Configuración de Servidor ---
# Define cómo se ejecutará la aplicación en un servidor de producción (WSGI).
WSGI_APPLICATION = 'backend.wsgi.application'


# --- Base de Datos ---
# Carga la URL de conexión a la base de datos desde las variables de entorno.
DATABASE_URL = os.environ.get('DATABASE_URL')
if DATABASE_URL is None:
    raise ImproperlyConfigured(
        "La variable de entorno DATABASE_URL no está configurada. "
        "Asegúrate de que esté en tu archivo .env."
    )

# 'dj-database-url' parsea la URL y configura la base de datos automáticamente.
# Esto facilita cambiar entre diferentes bases de datos (SQLite, PostgreSQL, etc.).
DATABASES = {'default': dj_database_url.config(
    conn_max_age=600, default=DATABASE_URL)}


# --- Validación de Contraseñas ---
# Define un conjunto de reglas para asegurar que las contraseñas de los usuarios sean seguras.
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# --- Internacionalización ---
# Configuraciones para el idioma y la zona horaria.
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# --- Archivos Estáticos y Multimedia ---
# URL base para los archivos estáticos (CSS, JS de Django Admin).
STATIC_URL = 'static/'

# Tipo de clave primaria por defecto para los nuevos modelos.
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuración de Django Rest Framework
# Define la clase de autenticación por defecto para toda la API.
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # Habilita la autenticación por token para toda la API
        'rest_framework.authentication.TokenAuthentication',
    ],
}

# URL base para los archivos subidos por los usuarios (avatares, imágenes de posts).
MEDIA_URL = '/media/'
# Directorio en el servidor donde se guardarán estos archivos.
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
